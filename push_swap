#include "push_swap.h"


Element* creerElement() 
{
    Element* nouvelElement = (Element*)malloc(sizeof(Element));
    if (nouvelElement != NULL) {
        nouvelElement->valeur = 0;
        nouvelElement->suivant = NULL;
    }
    return nouvelElement;
}

Element* add_nbr(Element *list, int value)
{
    Element* nouvelElement = creerElement();
    if (nouvelElement != NULL) {
        nouvelElement->valeur = value;
        nouvelElement->suivant = list;
        list = nouvelElement;
    }
    return list;
}

void draw_list(Element *list)
{
    while(list)
    {
        printf("%d ", list->valeur); 
        list = list->suivant;
    }
    printf("\n"); 
}

Element* remlistelir_liste(int argc, char **argv, int *len) 
{
    Element* liste = NULL;
    *len = 0; // initialisez la valeur à laquelle len pointe à 0
    for (int i = 1; i < argc; i++) {
        int valeur = atoi(argv[i]);
        liste = add_nbr(liste, valeur);
        (*len)++; // incrémentez la valeur à laquelle len pointe
    }
    return liste;
}

int is_empty(Element *liste) {
    return liste == NULL;
}

int is_order(Element *liste)
{
    while(liste != NULL && liste->suivant != NULL)
    {
        if(liste->valeur > liste->suivant->valeur)
            return 0;
        liste = liste->suivant;
    }
    return 1;
}

int is_order_descending(Element *liste)
{
    while(liste != NULL && liste->suivant != NULL)
    {
        if(liste->valeur < liste->suivant->valeur)
            return 0;
        liste = liste->suivant;
    }
    return 1;
}

void algo(Element **liste, Element **liste_b)
{
    pb(liste, liste_b);
    pb(liste, liste_b);
}

int get_rotations_to_top(Element* stack, int num) {
    int rotations_top = 0;
    int rotations_bottom = 0;
    Element* current = stack;

    while (current) {
        if (current->valeur == num) {
            break;
        }
        rotations_top++;
        current = current->suivant;
    }

    rotations_bottom = -rotations_top;

    return (rotations_top < -rotations_bottom) ? rotations_top : rotations_bottom;
}

int get_rotations_to_correct_position(Element* stack_b, int num) {
    int rotations_top = 0;
    int rotations_bottom = 0;
    Element* current = stack_b;
    int length = 0;

    while (current) {
        length++;
        current = current->suivant;
    }

    current = stack_b;
    while (current && current->suivant) {
        if (current->valeur > num && current->suivant->valeur < num) {
            break;
        }
        rotations_top++;
        current = current->suivant;
    }

    rotations_bottom = length - rotations_top;

    return (rotations_top < rotations_bottom) ? rotations_top : -rotations_bottom;
}


int calculate_operations(Element* stack_a, Element* stack_b, int num) {
    int rotations_a = get_rotations_to_top(stack_a, num);
    int rotations_b = get_rotations_to_correct_position(stack_b, num);

    return abs(rotations_a) + abs(rotations_b) + 1;
}

int push_cheapest(Element* stack_a, Element* stack_b) 
{
    int min_operations = 600; // Initialiser avec une grande valeur
    int num_to_push;
    Element* current = stack_a;

    while (current) {
        int ops = calculate_operations(stack_a, stack_b, current->valeur);
         if (ops < min_operations) {
            min_operations = ops;
            num_to_push = current->valeur;
        }
        current = current->suivant;
    }
    printf("min op :%d\n", min_operations);
    return (num_to_push);
}


int main(int argc, char **argv)
{
    Element *liste = NULL;
    Element *liste_b = NULL;
    int len = 0;
    int min;
    liste = remlistelir_liste(argc, argv, &len);
    draw_list(liste);
    algo(&liste,&liste_b);
    draw_list(liste);
    min = push_cheapest(liste, liste_b);
    printf(" min : %d\n", min);
    draw_list(liste_b);
    while (liste != NULL) 
    {
        Element* temliste = liste;
        liste = liste->suivant;
        free(temliste);
    }
    return 0;
}

